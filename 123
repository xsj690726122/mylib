ha.it's my first load in github.
/*糟糕的数控键盘*/
#include<reg52.h>
#define uchar unsigned char
#define uint unsigned int
#define ul unsigned long int
uchar ushake = 0;
uchar SL = 0;
ul code key_scan[]={0x1fffff,0x1ffffe,0x1ffffd,0x1fffff,0x1fffff,0x1fffef,
  					0x1fffff,0x1fffbf,0x1fff7f,0x1ffeff,0x1ffdff,0x1ffbff,
					0x1ff7ff,0x1fefff,0x1fdfff,0x1fbfff,0x1f7fff,0x1effff,
					0x1dffff,0x1bffff,0x17ffff,0x0fffff};//由第1位向第21位扫描代码3,4,6号线与2号薄膜线有关，暂不讨论
uchar code set_keyBord_code[22][22]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,//0号线
									 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
									 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
									 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
									 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
									 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
									 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
									 0,60,61,0,0,62,0,0,0,0,0,0,0,0,0,53,54,55,56,57,58,0,
									 0,50,51,0,0,52,0,0,0,0,0,0,0,0,0,0,44,45,46,47,48,0,
									 0,41,42,0,0,43,0,0,0,0,0,0,0,0,0,0,35,36,37,38,39,0,
									 0,0,73,0,0,64,0,0,0,0,0,0,0,0,0,28,29,30,31,32,33,34,
									 0,0,26,0,0,27,0,0,0,0,0,0,0,0,0,0,20,21,22,23,24,25,
									 0,17,18,0,0,19,0,0,0,0,0,0,0,0,0,0,11,12,13,14,15,16,
									 0,8,9,0,0,10,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,
									 0,71,72,0,0,74,0,0,0,0,0,0,0,0,0,63,65,66,67,68,69,70,
									 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
									 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
									 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
									 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
									 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
									 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
									 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
uchar code send_to_pc[70]={0,0x7B,57,54,0x63,0x6e,0x6b,0x2d,0xd,0x00,0x00,
						   0x68,0x65,0x62,0x60,0x00,0x2e,0x09,0x00,0x00,
						   0x67,0x64,0x61,0x6d,0x6f,0x8,0x00,0x00,
						   0x00,0x80,0x67,0x82,0x76,0x66,0x00,
						   0x71,0x90,0x75,0x84,0x72,0x00,0x00,0x00,0x00};
//uchar code SL_function[]/*二号线路检测函数返回值为发生变化的线的编号，辅助功能有待确定 ，另需加装USB模块 */
/************************			 
函数描述：获取端口值函数
函数参数：
返回类型：ul
*************************/
ul getPin30_port()
{
    ul port,port2,port1,port0;
	   port0 = P0;//低8位状态
	   port1 = P1;//中8位状态
	   port2 = P2;//高8位状态
	   port =  port0+(port1<<8)+(port2<<16);
	   return port;
}
/************************
函数描述：设置端口状态函数
函数参数：ul
返回类型：无
*************************/
void setPin30_port(ul port)
{
    uchar port0,port1,port2;
	port0 = port;
	port1 = (port>>8);
	port2 = (port>>16);
	   P0 = port0;
	   P1 = port1;
	   P2 = port2;
}
/********************
函数描述：延时函数1ms
函数参数：uchar
返回值   ：无
********************/
void delay(uchar i)
{
  uchar j,k; 
  for(j=i;j>0;j--)
    for(k=125;k>0;k--);
}
 /********************
函数描述:串口初始化函数
函数参数：
返回值   ：无
********************/
  void UART_init(void)
{
    TMOD=0x20;		   //用定时器设置串口波特率
	TH1=0xfd;
	TL1=0xfd;
	TR1=1;
	REN=0;          //串口初始化REN=0禁止接收
	SM0=0;
	SM1=1;//10位异步收发
}
/********************
函数描述:串口发送函数
函数参数：
返回值   ：无
********************/
   void UART_send(uchar i)
{
    delay(5);
	TI=0;
	SBUF=i;
	TI=1;
}
/************************
函数描述：键盘变化扫描函数
函数参数：
返回类型：ul（发生变化的扫描值）
*************************/
ul keyBord_30pin_scan()
{
     ul i,port_state;
	 for(i=1;i<=21;i++)
	 {
	      setPin30_port(key_scan[i]);
		  delay(5);
		  port_state = getPin30_port();
		  if(key_scan[i]!=port_state)
		  {
		      return port_state;
		  }
		  if(i==21)
		  {
		      ushake = 1;
		  }
	 }
	 return 0;
}

/************************
函数描述：端口变化值分析函数
函数参数：端口值
返回类型：对应keybord编号
*************************/
uchar analyze_keyBord(ul port_state)
{
    uchar port_queue[2];
	uchar wflag=0,j=0,i,mflag;
	for(i=0;i<2;i++)//初始化数组
	{
	    port_queue[i] = 0;
	}
	for(i=1;i<22;i++) //对端口值按位检测
	{
	    mflag = (port_state>>wflag)&0x000001;
	    wflag++;
		if(mflag == 0)
		{
		    port_queue[j] = wflag;//将本次扫描有效端口序号保留
			j++;
		}
	        
	}
	for(i=0;i<2;i++)
	{
	    for(j=0;j<2;j++)
		{
		    if((i!=j)&&(set_keyBord_code[port_queue[i]][port_queue[j]] != 0))
			{
			return set_keyBord_code[port_queue[i]][port_queue[j]];
			}
		}
	}
	return 0;


}
/************************
函数描述:将对应键值编码发送至PC
函数参数：键值编号（uchar）
返回类型：
*************************/
void sendPc_fun(uchar analyze)
{	
	UART_send(send_to_pc[analyze]);
}
/************************
函数描述:此处为二号线路检测函数
函数参数：
返回类型：
*************************/
uchar scan_Sline()
{
    uint flag,i;
	uchar wflag = 5,ruset;
	P1 = 0xff;//高八位
	P2 = 0xfe;//低八位
	delay(5);
	flag = P1;
	flag = (flag<<8)+P2;
	if(flag!=0xfffe)
	{
	    for(i=0;i<11;i++)
		{
	    ruset = (flag>>wflag)&0x0001;
		wflag++;
		if(i == 10)
		{
		    SL = 1;
		}
		if(ruset == 0)
		{
		     return wflag;   
		}
		}
	}
}
/************************
函数描述:主函数
函数参数：
返回类型：
*************************/
void main()
{	uchar analyze;
    ul keyBord = 0; 
    UART_init();
while(1)
    {
	while(keyBord==0)
	    {
	        keyBord = keyBord_30pin_scan();
	    }
		analyze = analyze_keyBord(keyBord);
		if(analyze == 0)
		{
		    keyBord = 0;
		}
	while(analyze!=0)
	    {	if(ushake == 1)
		{
		     sendPc_fun(analyze);
			 ushake = 0;
		}
			keyBord = 0;
			analyze = 0;
	    }
    }
}




